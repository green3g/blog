{
    "docs": [
        {
            "location": "/",
            "text": "Welcome!\n\n\nThis is a collection of miscellaneous blogs and ramblings.",
            "title": "Home"
        },
        {
            "location": "/#welcome",
            "text": "This is a collection of miscellaneous blogs and ramblings.",
            "title": "Welcome!"
        },
        {
            "location": "/2015/January/ArcMap Metadata Update/",
            "text": "ArcMap Update Layer Descriptions to Stored Metadata\n\n\nArcGIS Server stores a lot of information about each layer, including SOME of the metadata that is kept in an ArcGIS shapefile, or database feature class. The reason I say some, is that only the Description of the metadata is actually stored in the layer in the mxd, and that is the only text that gets published. In addition to this problem, the metadata is not automatically updated in an mxd when you edit the metadata in the feature class, and the only way to update that metadata description is to remove the layer from the mxd, and re-add it. Or you can do it manually with a script.\n\n\nThe script below iterates through each layer in the current mxd and exports the metadata to an xml. This is necessary since ArcPy doesn't have direct access to the metadata. Then it parses the xml document, and searches for the 'abstract', 'purpose', and 'credit', creates a nice looking string and sets the layer description to that string. The script can easily be modified to include less or more depending on your metadata. It may not work for all metadata types, but it worked for our setup.\n\n\nimport arcpy,xml #set local variables\ndir = arcpy.GetInstallInfo(\ndesktop\n)[\nInstallDir\n] translator = dir + \nMetadata/Translator/ESRI_ISO2ISO19139.xml\n\nmxd = arcpy.mapping.MapDocument(\nCURRENT\n)\ndf = arcpy.mapping.ListDataFrames(mxd)[0] temp_path = \nC:/temp\n\nfor layer in arcpy.mapping.ListLayers(mxd, \n*\n, df[0]):\n     if not layer.isGroupLayer:\n         description_text = \n\n         path = temp_path + '/' + layer.datasetName + '.xml'\n         print path\n         arcpy.ExportMetadata_conversion(layer.dataSource, translator, path)\n         dom = xml.dom.minidom.parse(path)\n         fields = ('abstract', 'purpose', 'credit')\n         for field in fields:\n             tags = dom.getElementsByTagName(field)\n             print str( len(tags) ) + ' | ' + str( tags )\n             if len(tags):\n                 tag_string = tags[0].getElementsByTagName('gco:CharacterString')[0].childNodes[0].nodeValue\n                 description_text = description_text + \n\\n\\n\n + field.capitalize() + \n:\\n\n + tag_string\n                 print description_text\n                 layer.description = description_text\n                   if field == 'credit':\n                        layer.credit = tag_string",
            "title": "ArcMap Metadata Update"
        },
        {
            "location": "/2015/January/ArcMap Metadata Update/#arcmap-update-layer-descriptions-to-stored-metadata",
            "text": "ArcGIS Server stores a lot of information about each layer, including SOME of the metadata that is kept in an ArcGIS shapefile, or database feature class. The reason I say some, is that only the Description of the metadata is actually stored in the layer in the mxd, and that is the only text that gets published. In addition to this problem, the metadata is not automatically updated in an mxd when you edit the metadata in the feature class, and the only way to update that metadata description is to remove the layer from the mxd, and re-add it. Or you can do it manually with a script.  The script below iterates through each layer in the current mxd and exports the metadata to an xml. This is necessary since ArcPy doesn't have direct access to the metadata. Then it parses the xml document, and searches for the 'abstract', 'purpose', and 'credit', creates a nice looking string and sets the layer description to that string. The script can easily be modified to include less or more depending on your metadata. It may not work for all metadata types, but it worked for our setup.  import arcpy,xml #set local variables\ndir = arcpy.GetInstallInfo( desktop )[ InstallDir ] translator = dir +  Metadata/Translator/ESRI_ISO2ISO19139.xml \nmxd = arcpy.mapping.MapDocument( CURRENT )\ndf = arcpy.mapping.ListDataFrames(mxd)[0] temp_path =  C:/temp \nfor layer in arcpy.mapping.ListLayers(mxd,  * , df[0]):\n     if not layer.isGroupLayer:\n         description_text =  \n         path = temp_path + '/' + layer.datasetName + '.xml'\n         print path\n         arcpy.ExportMetadata_conversion(layer.dataSource, translator, path)\n         dom = xml.dom.minidom.parse(path)\n         fields = ('abstract', 'purpose', 'credit')\n         for field in fields:\n             tags = dom.getElementsByTagName(field)\n             print str( len(tags) ) + ' | ' + str( tags )\n             if len(tags):\n                 tag_string = tags[0].getElementsByTagName('gco:CharacterString')[0].childNodes[0].nodeValue\n                 description_text = description_text +  \\n\\n  + field.capitalize() +  :\\n  + tag_string\n                 print description_text\n                 layer.description = description_text\n                   if field == 'credit':\n                        layer.credit = tag_string",
            "title": "ArcMap Update Layer Descriptions to Stored Metadata"
        },
        {
            "location": "/2015/January/Install Skype In OpenSUSE/",
            "text": "Skype install on OpenSUSE 13.1 Linux\n\n\nFirst, install the required libraries:\n\n\nsu zypper install xorg-x11-libXv-32bit libqt4-32bit libqt4-x11-32bit libpng12-0-32bit libQtWebKit4-32bit\n\n\n\n\nNext, download the rpm file for skype, install it using Apper by double clicking on the rpm.",
            "title": "Install Skype In OpenSUSE"
        },
        {
            "location": "/2015/January/Install Skype In OpenSUSE/#skype-install-on-opensuse-131-linux",
            "text": "First, install the required libraries:  su zypper install xorg-x11-libXv-32bit libqt4-32bit libqt4-x11-32bit libpng12-0-32bit libQtWebKit4-32bit  Next, download the rpm file for skype, install it using Apper by double clicking on the rpm.",
            "title": "Skype install on OpenSUSE 13.1 Linux"
        },
        {
            "location": "/2015/January/MP495 Install Linux/",
            "text": "How to install a mp495 Canon printer on Linux OpenSUSE 13.1\n\n\nSometimes installing printers on linux has been pretty troublesome, especially when native support isn't included out of the box, but this time around, things were really simple and I wanted to share that with anyone who may find it useful.\n\n\nThis guide is specifically how I installed the Canon PIXMA MP 495 on my OpenSUSE 13.1 64 bit edition. Also, I am using the Gnome spin of OpenSUSE. To begin with, I already had the mp495 connected to the network. I had previously used a Windows machine and the provided software to accomplish this. Alternatively, Canon Australia provides Ubuntu packages to configure this.\n\n\nFirst, I needed the cups-bjnp library. This is available from a quick Google Search, or here at the time of this writing:\n\n\nhttp://sourceforge.net/projects/cups-bjnp/\n\n\nTo install this library, I also needed to install cups-devel, the development cups library.\n\n\nsudo zypper in cups-devel\n\n\nNext we will extract, configure, and install the cups-bjnp library.\n\n\ncd ~/Downloads #or wherever your downloaded tar is.\n tar -xfv cups-bjnp-1.2.2.tar\n cd cups-bjnp-1.2.2\n ./configure\n\n\nif you didn't get any errors in the previous step, proceed, otherwise do some research to find out what went wrong, if all went well, type:\n\n\nsudo make install\n\n\nIf everything went well, which it did for me, open YAST from the Activities. Choose Printers, then Add +.\n\n\nChoose Connection Wizard, Special, Sepcify Arbitrary Device URI.\n\n\nType bjnp://your-printer-ip-address into the first URI field.\n\n\nChoose Canon for the second field.\n\n\nSearch for Canon MP495 in the Find and Assign Driver, choose the first option. Click OK, and you should be able to print a test page.\n\n\nNot so bad, right?",
            "title": "MP495 Install Linux"
        },
        {
            "location": "/2015/January/MP495 Install Linux/#how-to-install-a-mp495-canon-printer-on-linux-opensuse-131",
            "text": "Sometimes installing printers on linux has been pretty troublesome, especially when native support isn't included out of the box, but this time around, things were really simple and I wanted to share that with anyone who may find it useful.  This guide is specifically how I installed the Canon PIXMA MP 495 on my OpenSUSE 13.1 64 bit edition. Also, I am using the Gnome spin of OpenSUSE. To begin with, I already had the mp495 connected to the network. I had previously used a Windows machine and the provided software to accomplish this. Alternatively, Canon Australia provides Ubuntu packages to configure this.  First, I needed the cups-bjnp library. This is available from a quick Google Search, or here at the time of this writing:  http://sourceforge.net/projects/cups-bjnp/  To install this library, I also needed to install cups-devel, the development cups library.  sudo zypper in cups-devel  Next we will extract, configure, and install the cups-bjnp library.  cd ~/Downloads #or wherever your downloaded tar is.\n tar -xfv cups-bjnp-1.2.2.tar\n cd cups-bjnp-1.2.2\n ./configure  if you didn't get any errors in the previous step, proceed, otherwise do some research to find out what went wrong, if all went well, type:  sudo make install  If everything went well, which it did for me, open YAST from the Activities. Choose Printers, then Add +.  Choose Connection Wizard, Special, Sepcify Arbitrary Device URI.  Type bjnp://your-printer-ip-address into the first URI field.  Choose Canon for the second field.  Search for Canon MP495 in the Find and Assign Driver, choose the first option. Click OK, and you should be able to print a test page.  Not so bad, right?",
            "title": "How to install a mp495 Canon printer on Linux OpenSUSE 13.1"
        },
        {
            "location": "/2015/January/Quick Media Center/",
            "text": "Quick and Easy Windows Hardware Monitor\n\n\nHave you ever wondered how much heat is building up inside your pc, or how fast your fans are spinning? There are many tools around to give you this information, including \nSamurize\n, and \nRainmeter\n. While these tools can be extremly powerful and give you plenty of eye candy to watch, they can often take an afternoon simply to configure to your liking. Of course you can always download preconfigured widgets or 'skins' as Rainmeter calls them, but you may not necessarily get all the information you would like, for example I wanted to see how much load was on my gpu, and how hot it was.\n\n\nI decided to give Rainmeter a shot. It has a very nice interface for adding prebuilt skins and allows you to edit them as necessary. Editing the code has a fairly sharp learning curve as I found out, and could not get a GPU temperature to display properly.\n\n\nNext up, I tried Samurize. This program seems quite outdated, however, and is designed for an older version of windows, like XP, although some people have gotten it to work.\n\n\nAnother solution I have found and currently am using is  \nOpen Hardware Monitor\n, an open source tool which easily detects most hardware, and the details that I wanted. I tested it on Windows 8 (64 Bit) and it worked well, although the program is apparently still in beta.\n\n\nAfter downloading, since there is no installer, I simply copied it to my Documents folder. After running (as administrator) it gave me all the information I needed to create a custom widget. Built right into the tool is a desktop gadget. Navigate to View -\n Show Gadget. By right clicking the items I wanted displayed (such as GPU core, Memory, etc) followed by Show in Gadget, I could customize my own system monitor in seconds.\n\n\nFinally, the options menu provides choices to keep the program running when closed, and minimized (so your gadget stays running) and also the option to start automatically with windows. No install, no restart necessary. In addition all your preferences appear to be written to a file within the directory OSM is placed.\n\n\nAccording to the site, there is also a linux version available, although it looks like it runs under the wine-mono library so its not a native linux software by any means. For linux users several options exist including the well known and powerful app Conky.",
            "title": "Quick Media Center"
        },
        {
            "location": "/2015/January/Quick Media Center/#quick-and-easy-windows-hardware-monitor",
            "text": "Have you ever wondered how much heat is building up inside your pc, or how fast your fans are spinning? There are many tools around to give you this information, including  Samurize , and  Rainmeter . While these tools can be extremly powerful and give you plenty of eye candy to watch, they can often take an afternoon simply to configure to your liking. Of course you can always download preconfigured widgets or 'skins' as Rainmeter calls them, but you may not necessarily get all the information you would like, for example I wanted to see how much load was on my gpu, and how hot it was.  I decided to give Rainmeter a shot. It has a very nice interface for adding prebuilt skins and allows you to edit them as necessary. Editing the code has a fairly sharp learning curve as I found out, and could not get a GPU temperature to display properly.  Next up, I tried Samurize. This program seems quite outdated, however, and is designed for an older version of windows, like XP, although some people have gotten it to work.  Another solution I have found and currently am using is   Open Hardware Monitor , an open source tool which easily detects most hardware, and the details that I wanted. I tested it on Windows 8 (64 Bit) and it worked well, although the program is apparently still in beta.  After downloading, since there is no installer, I simply copied it to my Documents folder. After running (as administrator) it gave me all the information I needed to create a custom widget. Built right into the tool is a desktop gadget. Navigate to View -  Show Gadget. By right clicking the items I wanted displayed (such as GPU core, Memory, etc) followed by Show in Gadget, I could customize my own system monitor in seconds.  Finally, the options menu provides choices to keep the program running when closed, and minimized (so your gadget stays running) and also the option to start automatically with windows. No install, no restart necessary. In addition all your preferences appear to be written to a file within the directory OSM is placed.  According to the site, there is also a linux version available, although it looks like it runs under the wine-mono library so its not a native linux software by any means. For linux users several options exist including the well known and powerful app Conky.",
            "title": "Quick and Easy Windows Hardware Monitor"
        },
        {
            "location": "/2015/January/Sharepoint Scroll Bug/",
            "text": "Fix Sharepoint's Scroll Bug\n\n\nWhile working with Sharepoint, I've discovered that quite often, the page will not allow scrolling, and the ribbon functionality built into Sharepoint seems broken. I've found that what appears to be happening is that Sharepoint's javascript function that sets up the page scrolling, and the ribbon is not being called. Microsoft placed this function call in the body onload event, which appears to work in IE and Firefox, but not in Chrome for whatever reason. So this simple script I found on the web fixes the issue completely by checking to see if Sharepoint's function has been called, and if not, call it to set up the page. It uses jQuery's document.ready to ensure the necessary resources have completely loaded.\n\n\nscript\n\n$(document).ready(function() {\n\n     var interval;\n\n     // Give SP a chance..\n     setTimeout(function () { interval = window.setInterval(loopCheck, 30); }, 120);\n});\n\nfunction loopCheck() {\n     try { //typeof may fail on some browsers if _spBodyOnLoadWrapper isn't initialized\n          if (typeof (_spBodyOnLoadWrapper) !== \nundefined\n \n _spBodyOnLoadCalled == false)\n               _spBodyOnLoadWrapper();\n\n          else\n               window.clearInterval(interval);\n        }\n     } catch (e){\n          //log the error if you want\n          //console.log(\ntypeof error occurred\n);\n\n     }\n}\n\n/script\n\n\n\n\n\nSource",
            "title": "Sharepoint Scroll Bug"
        },
        {
            "location": "/2015/January/Sharepoint Scroll Bug/#fix-sharepoints-scroll-bug",
            "text": "While working with Sharepoint, I've discovered that quite often, the page will not allow scrolling, and the ribbon functionality built into Sharepoint seems broken. I've found that what appears to be happening is that Sharepoint's javascript function that sets up the page scrolling, and the ribbon is not being called. Microsoft placed this function call in the body onload event, which appears to work in IE and Firefox, but not in Chrome for whatever reason. So this simple script I found on the web fixes the issue completely by checking to see if Sharepoint's function has been called, and if not, call it to set up the page. It uses jQuery's document.ready to ensure the necessary resources have completely loaded.  script \n$(document).ready(function() {\n\n     var interval;\n\n     // Give SP a chance..\n     setTimeout(function () { interval = window.setInterval(loopCheck, 30); }, 120);\n});\n\nfunction loopCheck() {\n     try { //typeof may fail on some browsers if _spBodyOnLoadWrapper isn't initialized\n          if (typeof (_spBodyOnLoadWrapper) !==  undefined    _spBodyOnLoadCalled == false)\n               _spBodyOnLoadWrapper();\n\n          else\n               window.clearInterval(interval);\n        }\n     } catch (e){\n          //log the error if you want\n          //console.log( typeof error occurred );\n\n     }\n} /script   Source",
            "title": "Fix Sharepoint's Scroll Bug"
        },
        {
            "location": "/2016/January/ArcMap Advanced Label/",
            "text": "Advanced Labeling in ArcMap - One feature, many labels\n\n\nWhen labeling items, sometimes you may want to have multiple values for a label, like for example, a polygon may contain several different zoning codes in a city block. How can we label each block with the specific zones that it it contains?\n\n\nEssentially, we have three tables:\n\n\nA polygon block table with the block ID\n\n\n\n\n\n\n\n\nBlock ID\n\n\nSHAPE\n\n\n\n\n\n\n\n\n\n\n1\n\n\nPolygon\n\n\n\n\n\n\n2\n\n\nPolygon\n\n\n\n\n\n\n3\n\n\nPolygon\n\n\n\n\n\n\n4\n\n\nPolygon\n\n\n\n\n\n\n\n\nA polygon zone table with a zone code\n\n\n\n\n\n\n\n\nZone Code\n\n\nSHAPE\n\n\n\n\n\n\n\n\n\n\nCom\n\n\nPolygon\n\n\n\n\n\n\nRes\n\n\nPolygon\n\n\n\n\n\n\nInd\n\n\nPolygon\n\n\n\n\n\n\n\n\nWe can do a spatial join that is one to many Zone polygons to Block polygons which produces a 3rd table.\n\n\n\n\n\n\n\n\nZone Code\n\n\nBlock ID\n\n\nSHAPE\n\n\n\n\n\n\n\n\n\n\nCom\n\n\n1\n\n\nPolygon\n\n\n\n\n\n\nInd\n\n\n1\n\n\nPolygon\n\n\n\n\n\n\nRes\n\n\n1\n\n\nPolygon\n\n\n\n\n\n\nInd\n\n\n3\n\n\nPolygon\n\n\n\n\n\n\nCom\n\n\n3\n\n\nPolygon\n\n\n\n\n\n\nCom\n\n\n2\n\n\nPolygon\n\n\n\n\n\n\nRes\n\n\n4\n\n\nPolygon\n\n\n\n\n\n\n\n\nNow we can relate the Block table (#1) to the Zone-Block table (#3)\n\n\nThe script below helps automate this by accepting a function and the table names as parameters and outputting the formatted lines for each one-many item.\n\n\n# Calculates the dynamic expression for a layer and can be used\n# to dynamically display related records text for data driven pages\n# or feature labels\n\n# Change the FindLabel parameter to the id field of the main table (ArcMap uses brackets in the [Field_Name])\n# This id should be related to each of the related tables\n# Also change the first line of FindLabel. Set parameter equal to the FindLabel parameter\ndef FindLabel ( [Block_ID] ):\n    return get_lookup_text([Block_ID])\n\n# create formatter functions to return what you want displayed\n# for each row. These should return plain text for each row.\n\n# returns a string with the block zone\ndef get_block(row):\n    return row[\nZone_Code\n]\n\n# change the lookup tables and assign their appropriate formatter function\n# Properties of each lookup item:\n# table: the name of the table in the mxd\n# row_formatter: the function that will format each row's properties and return\n# the text string\n# id_field: the name of the field in the table that is related to the\n# id passed in to FindLabel\n# fields: list of fields by name (optiononal) default '*'\nlookup_tables = [{\n    \ntable\n: \nRelated_Zones\n,\n    \nrow_formatter\n: get_parcel,\n    \nid_field\n: \nBlock ID\n,\n    \nfields\n: ['Block_ID', 'Zone_Code'],\n    \nheader\n: 'Block Zones:',\n},\n#other lookup tables...\n]\n\n#the guts\ndef get_lookup_text(id):\n    # init the return value\n    text = ''\n    if id is not None:\n        for table in lookup_tables:\n            if table.has_key('header'):\n                text += \n{} \\n\n.format(table['header'])\n            if type(id) is str or type(id) is unicode:\n                query = \n{} = '{}'\n.format(table[\nid_field\n], id)\n            else:\n                query = \n{} = {}\n.format(table[\nid_field\n], id)\n            fields = table['fields'] if table.has_key('fields') else '*'\n            with arcpy.da.SearchCursor(table[\ntable\n], fields, where_clause=query) as rows:\n                for row in rows:\n                    dictionary = dict()\n                    for idx, val in enumerate(rows.fields):\n                        dictionary[val] = row[idx]\n                    text += \n{} \\n\n.format(table[\nrow_formatter\n](dictionary))\n    return text",
            "title": "ArcMap Advanced Label"
        },
        {
            "location": "/2016/January/ArcMap Advanced Label/#advanced-labeling-in-arcmap-one-feature-many-labels",
            "text": "When labeling items, sometimes you may want to have multiple values for a label, like for example, a polygon may contain several different zoning codes in a city block. How can we label each block with the specific zones that it it contains?  Essentially, we have three tables:  A polygon block table with the block ID     Block ID  SHAPE      1  Polygon    2  Polygon    3  Polygon    4  Polygon     A polygon zone table with a zone code     Zone Code  SHAPE      Com  Polygon    Res  Polygon    Ind  Polygon     We can do a spatial join that is one to many Zone polygons to Block polygons which produces a 3rd table.     Zone Code  Block ID  SHAPE      Com  1  Polygon    Ind  1  Polygon    Res  1  Polygon    Ind  3  Polygon    Com  3  Polygon    Com  2  Polygon    Res  4  Polygon     Now we can relate the Block table (#1) to the Zone-Block table (#3)  The script below helps automate this by accepting a function and the table names as parameters and outputting the formatted lines for each one-many item.  # Calculates the dynamic expression for a layer and can be used\n# to dynamically display related records text for data driven pages\n# or feature labels\n\n# Change the FindLabel parameter to the id field of the main table (ArcMap uses brackets in the [Field_Name])\n# This id should be related to each of the related tables\n# Also change the first line of FindLabel. Set parameter equal to the FindLabel parameter\ndef FindLabel ( [Block_ID] ):\n    return get_lookup_text([Block_ID])\n\n# create formatter functions to return what you want displayed\n# for each row. These should return plain text for each row.\n\n# returns a string with the block zone\ndef get_block(row):\n    return row[ Zone_Code ]\n\n# change the lookup tables and assign their appropriate formatter function\n# Properties of each lookup item:\n# table: the name of the table in the mxd\n# row_formatter: the function that will format each row's properties and return\n# the text string\n# id_field: the name of the field in the table that is related to the\n# id passed in to FindLabel\n# fields: list of fields by name (optiononal) default '*'\nlookup_tables = [{\n     table :  Related_Zones ,\n     row_formatter : get_parcel,\n     id_field :  Block ID ,\n     fields : ['Block_ID', 'Zone_Code'],\n     header : 'Block Zones:',\n},\n#other lookup tables...\n]\n\n#the guts\ndef get_lookup_text(id):\n    # init the return value\n    text = ''\n    if id is not None:\n        for table in lookup_tables:\n            if table.has_key('header'):\n                text +=  {} \\n .format(table['header'])\n            if type(id) is str or type(id) is unicode:\n                query =  {} = '{}' .format(table[ id_field ], id)\n            else:\n                query =  {} = {} .format(table[ id_field ], id)\n            fields = table['fields'] if table.has_key('fields') else '*'\n            with arcpy.da.SearchCursor(table[ table ], fields, where_clause=query) as rows:\n                for row in rows:\n                    dictionary = dict()\n                    for idx, val in enumerate(rows.fields):\n                        dictionary[val] = row[idx]\n                    text +=  {} \\n .format(table[ row_formatter ](dictionary))\n    return text",
            "title": "Advanced Labeling in ArcMap - One feature, many labels"
        },
        {
            "location": "/2016/January/Long File Names/",
            "text": "How to delete a file with too long of file extension (Windows)\n\n\nWhen you want to completely delete a directory and it has file with long names inside it, robocopy does a VERY good job:\n\n\nmkdir empty_dir\nrobocopy empty_dir the_dir_to_delete /s /mir\nrmdir empty_dir\nrmdir the_dir_to_delete",
            "title": "Long File Names"
        },
        {
            "location": "/2016/January/Long File Names/#how-to-delete-a-file-with-too-long-of-file-extension-windows",
            "text": "When you want to completely delete a directory and it has file with long names inside it, robocopy does a VERY good job:  mkdir empty_dir\nrobocopy empty_dir the_dir_to_delete /s /mir\nrmdir empty_dir\nrmdir the_dir_to_delete",
            "title": "How to delete a file with too long of file extension (Windows)"
        },
        {
            "location": "/2016/January/Openlayers 3 Custom Projection/",
            "text": "Openlayers 3 (OL3) Custom projections using proj4\n\n\nCustom projections are a little tricky in web applications. In openlayers 3 there are several steps to take to completely support a custom projection in mapping and transformations.\n\n\n```javascript\n\n\n//add custom projections to proj4\n//This can be found on http://spatialreference.org/\nproj4.defs('EPSG:26986', '+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs');\n\n\n//add an alias to quickly reference\nproj4.defs('urn:ogc:def:crs:EPSG::26986', proj4.defs['EPSG:26986']);\nvar mass_proj = new ol.proj.Projection({\n  code: 'urn:ogc:def:crs:EPSG::26986',\n  extent: [31789.1658, 790194.4183, 337250.8970, 961865.1338],\n  units: 'm'\n});\n\n\n//add the projection to ol\nol.proj.addProjection(mass_proj);\n\n\n//add projection tranformation functions necessary\n//to transform geojson data\nol.proj.addCoordinateTransforms(\n  mass_proj, 'EPSG:900913',\n  function forward(coords) {\n    return proj4(\n      proj4.defs['EPSG:26986'], proj4.defs['EPSG:900913'],\n      coords);\n  },\n  function inverse(coords) {\n    return proj4(\n      proj4.defs['EPSG:900913'], proj4.defs['EPSG:26986'],\n      coords);\n  });\n\n\n```\n\n\nAs noted above, the proj4 definitions for most projections can be found at \nSpatial Reference",
            "title": "Openlayers 3 Custom Projection"
        },
        {
            "location": "/2016/January/Openlayers 3 Custom Projection/#openlayers-3-ol3-custom-projections-using-proj4",
            "text": "Custom projections are a little tricky in web applications. In openlayers 3 there are several steps to take to completely support a custom projection in mapping and transformations.  ```javascript  //add custom projections to proj4\n//This can be found on http://spatialreference.org/\nproj4.defs('EPSG:26986', '+proj=lcc +lat_1=42.68333333333333 +lat_2=41.71666666666667 +lat_0=41 +lon_0=-71.5 +x_0=200000 +y_0=750000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs');  //add an alias to quickly reference\nproj4.defs('urn:ogc:def:crs:EPSG::26986', proj4.defs['EPSG:26986']);\nvar mass_proj = new ol.proj.Projection({\n  code: 'urn:ogc:def:crs:EPSG::26986',\n  extent: [31789.1658, 790194.4183, 337250.8970, 961865.1338],\n  units: 'm'\n});  //add the projection to ol\nol.proj.addProjection(mass_proj);  //add projection tranformation functions necessary\n//to transform geojson data\nol.proj.addCoordinateTransforms(\n  mass_proj, 'EPSG:900913',\n  function forward(coords) {\n    return proj4(\n      proj4.defs['EPSG:26986'], proj4.defs['EPSG:900913'],\n      coords);\n  },\n  function inverse(coords) {\n    return proj4(\n      proj4.defs['EPSG:900913'], proj4.defs['EPSG:26986'],\n      coords);\n  });  ```  As noted above, the proj4 definitions for most projections can be found at  Spatial Reference",
            "title": "Openlayers 3 (OL3) Custom projections using proj4"
        },
        {
            "location": "/Projects/CMV/",
            "text": "Projects\n\n\nA list of projects I contribute to\n\n\nCMV\n\n\nA configureable mapping framework built on the ArcGIS for Javascript API\n\n\n\n\nWebsite\n\n\nMy Custom Widgets",
            "title": "CMV"
        },
        {
            "location": "/Projects/CMV/#projects",
            "text": "A list of projects I contribute to",
            "title": "Projects"
        },
        {
            "location": "/Projects/CMV/#cmv",
            "text": "A configureable mapping framework built on the ArcGIS for Javascript API   Website  My Custom Widgets",
            "title": "CMV"
        }
    ]
}